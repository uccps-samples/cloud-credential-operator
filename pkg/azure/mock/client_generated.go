// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	graphrbac "github.com/Azure/azure-sdk-for-go/services/graphrbac/1.6/graphrbac"
	gomock "github.com/golang/mock/gomock"
)

// MockAppClient is a mock of AppClient interface.
type MockAppClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppClientMockRecorder
}

// MockAppClientMockRecorder is the mock recorder for MockAppClient.
type MockAppClientMockRecorder struct {
	mock *MockAppClient
}

// NewMockAppClient creates a new mock instance.
func NewMockAppClient(ctrl *gomock.Controller) *MockAppClient {
	mock := &MockAppClient{ctrl: ctrl}
	mock.recorder = &MockAppClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppClient) EXPECT() *MockAppClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAppClient) Delete(ctx context.Context, applicationObjectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, applicationObjectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppClientMockRecorder) Delete(ctx, applicationObjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppClient)(nil).Delete), ctx, applicationObjectID)
}

// List mocks base method.
func (m *MockAppClient) List(ctx context.Context, filter string) ([]graphrbac.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]graphrbac.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAppClientMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppClient)(nil).List), ctx, filter)
}
