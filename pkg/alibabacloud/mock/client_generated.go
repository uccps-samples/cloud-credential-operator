// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	ram "github.com/aliyun/alibaba-cloud-sdk-go/services/ram"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AttachPolicyToUser mocks base method.
func (m *MockClient) AttachPolicyToUser(arg0 *ram.AttachPolicyToUserRequest) (*ram.AttachPolicyToUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPolicyToUser", arg0)
	ret0, _ := ret[0].(*ram.AttachPolicyToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPolicyToUser indicates an expected call of AttachPolicyToUser.
func (mr *MockClientMockRecorder) AttachPolicyToUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicyToUser", reflect.TypeOf((*MockClient)(nil).AttachPolicyToUser), arg0)
}

// CreateAccessKey mocks base method.
func (m *MockClient) CreateAccessKey(arg0 *ram.CreateAccessKeyRequest) (*ram.CreateAccessKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessKey", arg0)
	ret0, _ := ret[0].(*ram.CreateAccessKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessKey indicates an expected call of CreateAccessKey.
func (mr *MockClientMockRecorder) CreateAccessKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessKey", reflect.TypeOf((*MockClient)(nil).CreateAccessKey), arg0)
}

// CreatePolicy mocks base method.
func (m *MockClient) CreatePolicy(arg0 *ram.CreatePolicyRequest) (*ram.CreatePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0)
	ret0, _ := ret[0].(*ram.CreatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockClientMockRecorder) CreatePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockClient)(nil).CreatePolicy), arg0)
}

// CreatePolicyVersion mocks base method.
func (m *MockClient) CreatePolicyVersion(arg0 *ram.CreatePolicyVersionRequest) (*ram.CreatePolicyVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyVersion", arg0)
	ret0, _ := ret[0].(*ram.CreatePolicyVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyVersion indicates an expected call of CreatePolicyVersion.
func (mr *MockClientMockRecorder) CreatePolicyVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyVersion", reflect.TypeOf((*MockClient)(nil).CreatePolicyVersion), arg0)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(arg0 *ram.CreateUserRequest) (*ram.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*ram.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), arg0)
}

// DeleteAccessKey mocks base method.
func (m *MockClient) DeleteAccessKey(arg0 *ram.DeleteAccessKeyRequest) (*ram.DeleteAccessKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessKey", arg0)
	ret0, _ := ret[0].(*ram.DeleteAccessKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessKey indicates an expected call of DeleteAccessKey.
func (mr *MockClientMockRecorder) DeleteAccessKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessKey", reflect.TypeOf((*MockClient)(nil).DeleteAccessKey), arg0)
}

// DeletePolicy mocks base method.
func (m *MockClient) DeletePolicy(request *ram.DeletePolicyRequest) (*ram.DeletePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", request)
	ret0, _ := ret[0].(*ram.DeletePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockClientMockRecorder) DeletePolicy(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockClient)(nil).DeletePolicy), request)
}

// DeletePolicyVersion mocks base method.
func (m *MockClient) DeletePolicyVersion(request *ram.DeletePolicyVersionRequest) (*ram.DeletePolicyVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyVersion", request)
	ret0, _ := ret[0].(*ram.DeletePolicyVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyVersion indicates an expected call of DeletePolicyVersion.
func (mr *MockClientMockRecorder) DeletePolicyVersion(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyVersion", reflect.TypeOf((*MockClient)(nil).DeletePolicyVersion), request)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(arg0 *ram.DeleteUserRequest) (*ram.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*ram.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), arg0)
}

// DetachPolicyFromUser mocks base method.
func (m *MockClient) DetachPolicyFromUser(request *ram.DetachPolicyFromUserRequest) (*ram.DetachPolicyFromUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPolicyFromUser", request)
	ret0, _ := ret[0].(*ram.DetachPolicyFromUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPolicyFromUser indicates an expected call of DetachPolicyFromUser.
func (mr *MockClientMockRecorder) DetachPolicyFromUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicyFromUser", reflect.TypeOf((*MockClient)(nil).DetachPolicyFromUser), request)
}

// GetPolicy mocks base method.
func (m *MockClient) GetPolicy(arg0 *ram.GetPolicyRequest) (*ram.GetPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].(*ram.GetPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockClientMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockClient)(nil).GetPolicy), arg0)
}

// GetUser mocks base method.
func (m *MockClient) GetUser(arg0 *ram.GetUserRequest) (*ram.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*ram.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockClientMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), arg0)
}

// ListAccessKeys mocks base method.
func (m *MockClient) ListAccessKeys(arg0 *ram.ListAccessKeysRequest) (*ram.ListAccessKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessKeys", arg0)
	ret0, _ := ret[0].(*ram.ListAccessKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessKeys indicates an expected call of ListAccessKeys.
func (mr *MockClientMockRecorder) ListAccessKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessKeys", reflect.TypeOf((*MockClient)(nil).ListAccessKeys), arg0)
}

// ListPoliciesForUser mocks base method.
func (m *MockClient) ListPoliciesForUser(request *ram.ListPoliciesForUserRequest) (*ram.ListPoliciesForUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoliciesForUser", request)
	ret0, _ := ret[0].(*ram.ListPoliciesForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoliciesForUser indicates an expected call of ListPoliciesForUser.
func (mr *MockClientMockRecorder) ListPoliciesForUser(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoliciesForUser", reflect.TypeOf((*MockClient)(nil).ListPoliciesForUser), request)
}

// ListPolicyVersions mocks base method.
func (m *MockClient) ListPolicyVersions(request *ram.ListPolicyVersionsRequest) (*ram.ListPolicyVersionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyVersions", request)
	ret0, _ := ret[0].(*ram.ListPolicyVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyVersions indicates an expected call of ListPolicyVersions.
func (mr *MockClientMockRecorder) ListPolicyVersions(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyVersions", reflect.TypeOf((*MockClient)(nil).ListPolicyVersions), request)
}

// ListUsers mocks base method.
func (m *MockClient) ListUsers(arg0 *ram.ListUsersRequest) (*ram.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*ram.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockClientMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockClient)(nil).ListUsers), arg0)
}
